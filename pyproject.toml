[project]
name = "python-bsblan"
version = "0.0.0"
description = "Asynchronous Python client for BSBLAN API"
authors = [
    {name = "Willem-Jan van Rootselaar", email = "liudgervr@gmail.com"}
]
maintainers = [
    {name = "Willem-Jan van Rootselaar", email = "liudgervr@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
keywords = ["bsblan", "thermostat", "client" , "api", "async"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 3 - Alpha",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "aiohttp>=3.8.1",
    "yarl>=1.7.2",
    "packaging>=21.3",
    "backoff>=2.2.1",
    "mashumaro>=3.13.1",
    "orjson>=3.9.10",
]

[project.urls]
Homepage = "https://github.com/liudger/python-bsblan"
Repository = "https://github.com/liudger/python-bsblan"
Documentation = "https://github.com/liudger/python-bsblan"
"Bug Tracker" = "https://github.com/liudger/python-bsblan/issues"
Changelog = "https://github.com/liudger/python-bsblan/releases"


[tool.hatch.build.targets.wheel]
packages = ["src/bsblan"]


[tool.coverage.run]
plugins = ["covdefaults"]
source = ["src/bsblan"]
omit = [
    "tests/*",
    "*/tests/*",
    "test_*",
    "*test*"
]

[tool.coverage.report]
show_missing = true
fail_under = 53
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.11"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore= [
  "tests"
]

[tool.pylint.BASIC]
good-names = [
    "_",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "on",
    "Run",
    "T",
]

[tool.pylint.DESIGN]
max-attributes = 12

[tool.pylint."MESSAGES CONTROL"]
disable= [
    # "too-few-public-methods",
    "duplicate-code",
    "format",
    "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true
min-similarity-lines = 4  # Minimum lines number of a similarity.

[tool.pylint.FORMAT]
max-line-length=88

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN001", # Self... explanatory
  "ANN002", # cls... Not classy enough
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "PLR2004", # Just annoying, not really useful

  # Conflicts with the Ruff formatter
  "COM812",
  "ISC001",
]

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["bsblan"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["mashumaro.mixins.orjson.DataClassORJSONMixin"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.codespell]
ignore-words-list = "astroid"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "aresponses==3.0.0",
    "bandit==1.8.6",
    "black==25.1.0",
    "blacken-docs==1.20.0",
    "codespell==2.4.1",
    "covdefaults==2.3.0",
    "coverage==7.10.6",
    "darglint==1.8.1",
    "flake8==7.3.0",
    "flake8-simplify==0.22.0",
    # hatch is required to support type hinting and proper packaging of the py.typed file.
    "hatch>=1.14.1",
    "isort==6.0.1",
    "mypy==1.18.1",
    "pre-commit==4.3.0",
    "pre-commit-hooks==6.0.0",
    "pylint==3.3.8",
    "pytest>=8.3.5",
    "pytest-asyncio==1.1.0",
    "pytest-cov==6.3.0",
    "pyupgrade==3.20.0",
    "ruff==0.13.1",
    "safety==3.6.1",
    "vulture==2.14",
    "yamllint==1.37.1",
]
